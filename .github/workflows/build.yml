name: Build and Test

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
    
      - uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36
        id: changes
        with:
          filters: |
            src:
              - '**/Cargo.*'
              - 'rust-toolchain.toml'
              - 'src/**'
              - 'geekorm-*/**'
              - 'examples/**'
              - 'tests/**'

      - uses: dtolnay/rust-toolchain@nightly
        if: steps.changes.outputs.src == 'true'
        with:
          components: clippy,rustfmt
      
      - name: Restore cached Cargo 
        id: cache-restore
        if: steps.changes.outputs.src == 'true'
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build
        if: steps.changes.outputs.src == 'true'
        run: |
          cargo build --workspace
          cargo build -F all --workspace

      - name: Formatting Checks
        if: steps.changes.outputs.src == 'true'
        run: |
          cargo fmt --check

      - name: Run Analysis
        if: steps.changes.outputs.src == 'true'
        run: |
          cargo clippy --all-targets

      - name: Save Cargo / Rust Cache 
        id: cache-save
        if: steps.changes.outputs.src == 'true'
        uses: actions/cache/save@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ steps.cache-restore.outputs.cache-primary-key }}

  test:
    name: Tests
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:
      - uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36
        id: changes
        with:
          filters: |
            src:
              - '**/Cargo.*'
              - 'rust-toolchain.toml'
              - 'src/**'
              - 'geekorm-*/**'
              - 'examples/**'
              - 'tests/**'

      - uses: dtolnay/rust-toolchain@nightly
        if: steps.changes.outputs.src == 'true'
        with:
          components: clippy,rustfmt
      
      - name: Restore cached Cargo 
        id: cache-restore
        if: steps.changes.outputs.src == 'true'
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run tests
        if: steps.changes.outputs.src == 'true'
        run: |
          cargo test -F all --workspace

          # Run Examples Backend Features
          cargo run -F all,libsql --example geekorm-example-turso-libsql

  cli:
    name: CLI
    runs-on: ubuntu-latest
    steps:
      - uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36
        id: changes
        with:
          filters: |
            src:
              - '**/Cargo.*'
              - 'rust-toolchain.toml'
              - 'src/**'
              - 'geekorm-*/**'
              - 'examples/**'
              - 'tests/**'

      - uses: dtolnay/rust-toolchain@nightly
        if: steps.changes.outputs.src == 'true'
        with:
          components: clippy,rustfmt
      
      - name: Restore cached Cargo 
        id: cache-restore
        if: steps.changes.outputs.src == 'true'
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build CLI
        run: |
          cargo build \
            --example geekorm-example-turso-libsql \
            --features="all libsql"

          cargo run -p geekorm-cli -- display

